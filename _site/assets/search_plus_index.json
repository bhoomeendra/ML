{"/ML/jekyll/2023-06-04-PCA.html": {
    "title": "PCA",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-PCA.html",
    "body": "The idea of PCA is to find new basis in the same space such that the variance of the data is maximized along the new basis. The new basis are called principal components. The first principal component is the direction along which the variance of the data is maximized. The second principal component is the direction orthogonal to the first principal component along which the variance of the data is maximized. The third principal component is the direction orthogonal to the first two principal components along which the variance of the data is maximized. And so on. Once we have all the basis vectors, we can project the data onto the first few principal components to reduce the dimensionality of the data. The variance captured by the principal components is proportional to the eigenvalues of the corresponding eigenvectors. We want to find the direction along which the variance of the data is maximized. The variance of the data along a direction is given by the following equation: \\[\\underset{u^{T}.u=1}{max} \\; Var(u_{1}^T X)\\] Given that \\(X\\) is mean centered with respect to each feature, we can expand the variance as follows: \\[Var(u_{1}^T X) = (u_{1}^T X)(u_{1}^T X)^{T}\\] \\[Var(u_{1}^T X) = u_{1}^{T}Su_{1}\\] Now we want to find a \\(u_{1}\\) such that the variance is maximized. We can use the Lagrangian formulation to solve this problem. The Lagrangian formulation is as follows: \\[L(u_{1},\\lambda) = u_{1}Su_{1} - \\lambda(u_{1}^T u_{1} - 1)\\] We take the partial derivative of the Lagrangian formulation with respect to \\(u_{1}\\) and equate it to 0. We get the following equation: \\[Su_{1} = \\lambda u_{1}\\] This is the equation for eigenvalue and eigenvector. How does variance relate to eigenvalues? We can expand the variance as follows: \\[Var(u_{1}^T X) = u_{1}^{T}Su_{1}\\] \\[Var(u_{1}^T X) = u_{1}^{T}(\\lambda_{1} u_{1})\\] \\[Var(u_{1}^T X) = \\lambda_{1} u_{1}^{T}u_{1}\\] \\[Var(u_{1}^T X) = \\lambda_{1}\\] Important Points Because we do eigenvalue decomposition on the covariance matrix, and by defination covariance matrix we have to do mean centering of the data. When we have a large dataset we can use the following trick to do PCA. We can use the following equation to calculate the covariance matrix:\\(\\frac{1}{n}X^TX\\) as the resulting covariance matrix will be a square matrix of size \\(dxd\\) where \\(d\\) is the number of features. Once we have the eigenvectors all the data points can be projected onto the new basis and only the cofficients of the new basis will be stored. This is how we reduce the dimensionality of the data. PCA can be used to remove noise as the components with low variance can be removed. Most variance might not mean the most meaningful for instance lets say we are classifying dog breads then if we remove features with low variance we might remove the features that are important for classification. PCA is a linear transformation and orthogonal hence it can only capture linear relationships."
  },"/ML/jekyll/2023-06-04-LDA.html": {
    "title": "Linear Discriminant Analysis LDA",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-LDA.html",
    "body": ""
  },"/ML/jekyll/2023-06-04-KMeans.html": {
    "title": "K-Means",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-KMeans.html",
    "body": "K means is clustering algorithm where k denotes the number of clusters which we define before hand. The algorithm works as follows: Randomly initialize k cluster centers (select k points). Assign each point to the closest cluster center. Recompute the cluster centers by taking the mean of all the points in the new cluster. Repeat steps 2 and 3 until convergence (When we don’t see a lot of points change clusters). The above solution is a local optimum and not a global optimum. Mathamatically best cluster centers are the ones that minimize the following objective function: \\[\\underset{c}{min} \\sum_{i=1}^{k}\\sum_{x \\in c_i}^{n} \\left \\| x - \\mu_i \\right \\|^{2}\\] Where \\(c\\) is the set of clusters, \\(c_i\\) is the \\(i^{th}\\) cluster, \\(\\mu_i\\) is the mean of the \\(i^{th}\\) cluster and \\(n\\) is the number of points in the \\(i^{th}\\) cluster. This is a NP hard problem and hence we use the above algorithm to find a local optimum. Generally we run the above algorithm multiple times with different initializations and choose the one with the lowest objective function value. Important Points K means is sensitive to the initialization of the cluster centers hence we have kmeans++ in which we first pick a centroid and then the points are assigned a probability of begin selected as centroid based on the distance for the current point. K means is sensitive to outliers as the mean is sensitive to outliers to address this we have k medoids in which we use the median instead of the mean. K means is sensitive to the number of clusters we have in the data. To address this we have silhouette score which is a measure of how similar a point is to its own cluster compared to other clusters. The silhouette score is calculated as follows: \\(s = \\frac{b - a}{max(a,b)}\\) Where \\(a\\) is the mean distance between a point and all other points in the same cluster and \\(b\\) is the mean distance between a point and all other points in the next nearest cluster. The silhouette score is between -1 and 1. A score of 1 means that the point is very similar to its own cluster and very dissimilar to other clusters. A score of 0 means that the point is on the boundary of two clusters. A score of -1 means that the point is assigned to the wrong cluster. If the densities of the clusters are different then k means will not work well. DBSCAN is a clustering algorithm that can handle clusters with different densities. Non-globular clusters are clusters that are not spherical in shape. K means will not work well on non globular clusters."
  },"/ML/jekyll/2023-06-04-Hierarchical-Clustring.html": {
    "title": "Hierarchical Clustring",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-Hierarchical-Clustring.html",
    "body": "Hierarchical Clustering is of two types which are Divisive and Agglomerative. Agglomerative: This is a “bottom-up” approach: Each observation starts in its own cluster, and pairs of clusters are merged as one moves up the hierarchy. We start with each observation in its own cluster. Then, we merge the two closest clusters, and repeat until only one cluster remains. Merging Clusters: How do we define the distance between two clusters? Closest points (Single Link): Compute all pairwise distances between the observations in cluster A and the observations in cluster B, and record the closest distance. Furthest points (Complete Link): Compute all pairwise distances between the observations in cluster A and the observations in cluster B, and record the furthest distance. Average distance (Average Link): Compute all pairwise distances between the observations in cluster A and the observations in cluster B, and record the average distance. Ward’s method: Merge the two clusters such that the increase in the SSE (sum of squared errors) is minimized. This is the same objective function that k-means tries to minimize!(Need to understand this) Divisive: This is a “top-down” approach: All observations start in one cluster, and splits are performed recursively as one moves down the hierarchy. We start with all observations in the same cluster and calculate the distance matrix and after that we form a MST (Minimum spanning tree) and then we cut the tree at edges that have the largest distance till no edges are left."
  },"/ML/jekyll/2023-06-04-DBSCAN.html": {
    "title": "DBSCAN",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-DBSCAN.html",
    "body": "Density-based spatial clustering of applications with noise (DBSCAN) is a clustering algorithm that can handle clusters with different densities. The basic idea is as follows the dense region is the cluster the sparce region is considered noise. Some of the important definitions are as follows: Core point: A point is a core point if it has at least a minimum number of points (MinPts) within its radius \\(\\epsilon\\). Border point: A point that is not a core point but is within the radius \\(\\epsilon\\) of a core point. Noise point: A point that is neither a core point nor a border point. Density edge: Edge between core points such that the distance between the two core points is less than \\(\\epsilon\\). Density connected: A point \\(p\\) is density connected to a point \\(q\\) if there exists a path such that all the edges in the path are density edges. Algorithm: Label all points as core, border or noise points and remove noise points. All the core points that are density connected form a cluster. Assign each border point to the closest core point’s cluster. Important Points No controle over the number of clusters. Can take arbitrary shapes. Not sensitive to outliers. Varing density clusters can not be handled. High dimensional data can not be handled.(Curse of dimensionality)"
  },"/ML/jekyll/2023-06-04-Boosting.html": {
    "title": "Boosting",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-Boosting.html",
    "body": "Can a set of weak learners create a single strong learner? A weak learner is defined to be a classifier that is only slightly correlated with the true classification (it can label examples better than random guessing). In contrast, a strong learner is a classifier that is arbitrarily well-correlated with the true classification. Gradient Boosting"
  },"/ML/jekyll/2023-06-04-Bagging.html": {
    "title": "Bagging",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-Bagging.html",
    "body": "Given a standard training set \\(D\\) of size n, bagging generates m new training sets \\(D_{i}\\), each of size n′, by sampling from \\(D\\) uniformly and with replacement. By sampling with replacement, some observations may be repeated in each \\(D_{i}\\). These are the original, bootstrap, and out-of-bag datasets. Original dataset \\(D\\) of size n. Let say we have a bootstrap sample \\(D_{i}\\) of size n′. Then we would have \\(n - n′\\) OOB(out of bag) here n′ is the number of unique observations in \\(D_{i}\\). Now we train the model on \\(D_{i}\\) and test it on the OOB dataset. We repeat this process for all the bootstrap samples and then we aggregate the results of all the models to get the final model. In Bagging we are trying to reduce the variance of the model by training the model on different datasets and aggregating the results. Bagging is also called bootstrap aggregation. Each learner is high variance, low bias. Aggregating the learners reduces the variance of the ensemble. The reason for variance reduction is that individual learners would have a large variance but when we aggregate the results of all the learners the variance would be reduced. And as the bias of the learners is low the bias of the ensemble would also be low but can be more than the bias of the individual learners. Pros: Bagging is kind of works as a regularization method as the objective of regularization is to reduce the variance (Prevent Overfitting) of the model. The predictions of the model are more robust (More confident) as we are aggregating the results of multiple models. Bagging can be used for both classification and regression. Cons: Bagging take up a lot of memory as we are training multiple models. This can be a problem when we are working with large datasets. Loss of interpretability as we are aggregating the results of multiple models. For weak learner with high bias, bagging will also carry high bias into its aggregated model. Random Forest Interview Questions Discuss how bagging handles imbalanced datasets and its impact on the performance of the ensemble? Bagging can help in cases of data imbalace as we are sampling the data with replacement. This means that the minority class can be sampled more and if needed we can also oversample the minority class. This will help in improving the performance of the model."
  },"/ML/jekyll/2023-06-04-SVM.html": {
    "title": "SVM",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-SVM.html",
    "body": "SVM for Classification Let’s say we have +ve and -ve classes what SVM tries to do is find a hyperplane such that it maximizes the margin between the +ve and -ve classes. Geometric Intuition Convex hull of the +ve and -ve classes. Find the shortest line that connects the convex hulls of the +ve and -ve classes. The line that is perpendicular to the shortest line is the separating hyperplane that maximizes the margin between the +ve and -ve classes. Formulation We assume a separating hyperplane of the form \\(w^Tx + b = 0\\) where \\(w\\) is the normal vector to the hyperplane and \\(b\\) is the bias. We assume that the +ve class is on one side of the hyperplane at distance d and the -ve class is on the other side of the hyperplane at a distance c these are the margins and are parallel to the separating hyperplan. We can write the equation of the margins as follows: \\[w^Tx + b = d\\] \\[w^Tx + b = -c\\] we can divide the first equation by d and the second equation by c as in doesn’t change the formulation. Now Our goal is to maximize the margin between the margins. Which would be the same as minimizing \\(\\frac{2}{\\left \\| w \\right \\|}\\). Hence the Objective function becomes: \\[w^*,b^* = \\underset{w,b}{argmax}\\left (\\frac{2}{||w||}\\right )\\] \\[s.t \\:\\:\\: y_i(w^Tx_i + b) \\geq 1 \\:\\:\\: \\forall i\\] The important part is that the data points which have to be linearly separable for the above formulation to work. But in real world data is not linearly separable so we introduce the concept of slack variables. The slack variables are the distance of the data points from the margins. The objective function becomes: \\[w^*,b^* = \\underset{w,b}{argmin}\\left (\\frac{||w||}{2}\\right ) + C \\frac{1}{n}\\sum_{i}^{n}\\varepsilon_i\\] \\[s.t \\:\\:\\: y_i(w^Tx_i + b) \\geq 1 - \\varepsilon_i \\:\\:\\: \\forall i\\] If we look at the formulation we have added a penalty for error in the earlier formulation error was not possible because of the constraints of the formulation which is equivalent to C being infinity. Now we have a tradeoff between the margin and the error. If we increase C we are penalizing the error more and if we decrease C we are penalizing the margin more. We will convert the above formulation into a Lagrangian formulation and solve it using the Lagrangian multipliers. The Lagrangian formulation is as follows: \\[L(w,b,\\varepsilon,\\alpha,\\mu) = \\frac{||w||^{2}}{2} + C \\frac{1}{n}\\sum_{i}^{n}\\varepsilon_i - \\sum_{i}^{n}\\alpha_i(y_i(w^Tx_i + b) - 1 + \\varepsilon_i) - \\sum_{i}^{n}\\mu_i\\varepsilon_i\\] We take the partial derivative of the Lagrangian formulation with respect to w,b and \\(\\varepsilon\\) and equate them to 0. We get the following equations: \\[w = \\sum_{i}^{n}\\alpha_iy_ix_i\\] \\[0 = \\sum_{i}^{n}\\alpha_iy_i\\] \\[\\alpha_i = C - \\mu_i\\] We substitute the above equations in the Lagrangian formulation and we get the following formulation: \\[L(w,b,\\varepsilon,\\alpha,\\mu) = \\sum_{i}^{n}\\alpha_i - \\frac{1}{2}\\sum_{i}^{n}\\sum_{j}^{n}\\alpha_i\\alpha_jy_iy_jx_i^Tx_j\\] \\[s.t \\:\\:\\: \\sum_{i}^{n}\\alpha_iy_i = 0\\] \\[\\alpha_i \\geq 0\\] \\[\\mu_i \\geq 0\\] \\[\\varepsilon_i \\geq 0\\] \\[0 = \\sum_{i}^{n}\\alpha_iy_i\\] \\[0 = \\sum_{i}^{n}\\mu_i\\varepsilon_i\\] The \\(L(w,b,\\varepsilon,\\alpha,\\mu)\\) looks the same as the formulation for the dual problem of the Hard SVM the only differece is the constrains. The constrains \\(\\alpha_i \\geq 0\\) , \\(\\mu_i \\geq 0\\) and \\(\\alpha_i = C - \\mu_i\\) we combine these constrains and we get \\(0 \\leq \\alpha_i \\leq C\\). Model Prediction One’s we have identified the support vectors we can calculate the prediction on test as follows: \\[y = sign(\\sum_{i}^{n}\\alpha_iy_ix_i^Tx + b)\\] As only the support vectors contribute to the prediction we only need to store the support vectors and the corresponding \\(\\alpha\\) values. The other important thing to note is that the dot product \\(x_i^Tx_j\\) can be replaced by a kernel function \\(K(x_i,x_j)\\). Kernel Trick The kernel trick is a technique in which we can replace the dot product \\(x_i^Tx_j\\) with a kernel function \\(K(x_i,x_j)\\) which is a function which takes two vectors as input and outputs a scalar. The kernel function should satisfy the following properties: \\[K(x_i,x_j) = K(x_j,x_i)\\] \\[K(x_i,x_j) \\geq 0\\] \\[\\sum_{i}^{n}\\sum_{j}^{n}c_ic_jK(x_i,x_j) \\geq 0\\] i.e. Symmetric, Positive Semi-definite. The kernel function can be used to calculate the similarity between two vectors in a higher dimensional space without actually calculating the dot product in the higher dimensional space. Example: Kernel Functions Linear Kernel: \\(K(x_i,x_j) = x_i^Tx_j\\) Polynomial Kernel: \\(K(x_i,x_j) = (x_i^Tx_j + 1)^d\\) Gaussian Kernel(rbf kernel): \\(K(x_i,x_j) = exp(-\\frac{ \\left \\| x_i - x_j \\right \\| ^2}{2\\sigma^2})\\) Gaussian Kernel is the most commonly used kernel function. The hyperparameter \\(\\sigma\\) is the bandwidth of the kernel function.This is seen as \\(\\left \\| x_i - x_j \\right \\| ^2\\) is the squared distance between the two vectors. The hyperparameter \\(\\sigma\\) controls the kernel function. If \\(\\sigma\\) is small then the kernel function is very sensitive to the distance between the two vectors (only the vectors which have a distance almost zero will be considered similar) and if \\(\\sigma\\) is large then the kernel function is not very sensitive to the distance between the two vectors. Visit SVM for Regression Visit Pros SVM is a convex optimization problem hence we are guaranteed to find the global minima. SVM is a sparse model as only the support vectors contribute to the prediction. SVM can be non-linear using the kernel trick. SVM is effective in cases where the number of dimensions is greater than the number of samples. Cons SVM is computationally expensive and parallelization is not possible hence not suitable for large datasets. SVM is sensitive to outliers. SVM is not probabilistic in nature. References Slides"
  },"/ML/jekyll/2023-06-04-Biase_Variance_Tradeoff.html": {
    "title": "Biase Variance Tradeoff",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-06-04-Biase_Variance_Tradeoff.html",
    "body": "Visit When we talk about the Biase and Variance tradeoff we are talking about the error in the model and these are calculated on multiple(infinte) train and test splits of the data as these measures are statical in nature. Bias : Bias is the difference between the average prediction of all the models and the expected Label. The Dataset is also obtained from the a distribution \\(P(X,y)\\) so for a feature vectors X we a distribution of y which comes from \\(P(\\frac{Y}{X})\\) which means we have to get the expected label from the distribution \\(P(\\frac{Y}{X})\\). The reason for High bias could be that the model is too simple. Being High bias means that the model is not able to capture the general trend in the data. Low Bias means that the model is able to capture the general trend in the data and is a good situtation to be in. Variance : Let’s say we have 50 models and we have to calculate the variance of the models. We calculate the variance of the model by calculating the variability in the output of the models with the formula of variance. High variance means that the model is not able to generalize well on the data and is overfitting. This mean that if the model is trained on a different the predictions would change drastically. Low variance means that the model is able to generalize well on the data and is a good situation to be in. Tradeoff : Pursuing low bias requires increasing complexity which increases variance as now the model has room to overfit the data, and pursuing low variance requires decreasing complexity which increases bias."
  },"/ML/jekyll/2023-05-08-Decision_Tree.html": {
    "title": "Decision Tree",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-05-08-Decision_Tree.html",
    "body": "Decision tree is a type of supervised learning algorithm that can be used for classification and regression the the algorith tries to split the data into different groups based on the features such that it maximizes the information gain or minimizes the entropy. We will take the example of classification to understand the decision tree. Algorithm: We start with the root node which has all the data points. Now the first step is to split the root node based on the feature the question is how do we decide which feature is a good feature? We use the concept of information gain to decide which feature is a good feature. Information Gain Let’s say we have a feature called color which has 3 values red, blue and green. Now we want to split the data based on this feature. When we split the node based on color we would get three children. We calculate the entropy of the root node and then we calculate the entropy of the child nodes. The entropy of the root node is calculated as follows: \\[Entropy = -\\sum_{i=1}^{n} p_i \\log_{2}(p_i)\\] where $p_i$ is the probability of the class $i$ in the root node. Now we calculate the entropy of the child nodes. The entropy of the child nodes is calculated as follows: \\[Child Entropy = - \\sum_{j=1}^{C}\\frac{n_j}{n}*\\sum_{i=1}^{n_j} p_{ji} \\log_{2}(p_{ji})\\] where $p_{ji}$ is the probability of the class $i$ in the child node \\(j\\). \\(\\frac{n_j}{n}\\) gives the fraction of data points in a given child node compared to the root node. Now we calculate the information gain as follows: \\[Information Gain = Entropy - Child Entropy\\] We calculate the information gain for all the features and we select the feature which has the highest information gain. We split the root node based on this feature. We Repeat the above steps for all the child nodes until we get pure or mixed node to a certain amount or we reach the maximum depth of the tree. Spliting Criteria for Numerical features Let’s say we have a feature which is numerical and we want to split the data based on this feature. We first find all the unique values numerical data and sort them, then we find all the mid points between the consecutive values these would be cadidate threshold values. We calculate the information gain for all the threshold values and we select the one which gives the highest information gain. Stopping Criteria We stop when we reach the maximum depth of the tree. We stop when we reach the minimum number of data points in a leaf node. We stop when we reach the minimum information gain. Pruning Pruning is a technique in which we remove the nodes which do not add any value to the model. Gini Index Gini index is a measure of impurity. It is calculated as follows: \\[Gini Index = 1 - \\sum_{i=1}^{n} p_i^2\\] where $p_i$ is the probability of the class $i$ in the node. Pros Decision tree is easy to interpret. Decision tree can handle both numerical and categorical data. Minimal impact of outliers. Decision tree can be used for feature selection. Decision tree can be used for regression and classification. Normalization and scaling of data is not required. Cons Decision tree is prone to overfitting. Decision tree is unstable, small changes in the data can lead to large changes in the structure of the decision tree. Decision tree can create biased trees if some classes dominate. Regression Tree We minimize the sum of squared error at each split. And the prediction is the mean of the data points in the leaf node. For the first node the mean of the data would be the prediction. Now we will select a feature and threshold combination which will reduce the sum of squared error the most. We repeat the above step for all the child nodes until we reach the maximum depth of the tree or we reach the minimum number of data points in a leaf node."
  },"/ML/jekyll/2023-05-08-Linear-Regression.html": {
    "title": "Linear Regression",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-05-08-Linear-Regression.html",
    "body": "The linear regression establishes a relationship between the dependent variable (y) and one or more independent variables (x) using a best-fit straight line. This means relationship between the dependent and independent variables is linear in nature. Different ways to solve Linear Regression Normal Equation: The normal equation is a closed-form solution for linear regression (Gaussian Elimination). It finds the value of the regression coefficients that minimizes the sum of the squared residuals. Gradient Descent: Gradient descent is an iterative optimization algorithm that can be used to solve linear regression. It works by finding the minimum of a cost function, which is typically the sum of the squared residuals. Singular Value Decomposition: The SVD is used because the data matrix is non-invertible hence we calcute its pseudo-inverse using SVD this is a great artricle explaning the same Visit. Checks to apply before applying Linear Regression Linearity: Linear relationship between dependent and independent variables that can be done using person correlation coefficient not the spearman correlation coefficient. Normality: The residuals are normally distributed. This means that the residuals follow a bell-shaped curve, with most of the values clustered around the mean. The normality assumption is necessary because it allows us to use the standard techniques of statistical inference, such as hypothesis testing and confidence intervals. Violations of normality can lead to biased and inefficient estimates, and incorrect conclusions about the statistical significance of the independent variables. Homoscedasticity: The distribution of residual should be same for all the values of independent variable because if the errors are dependent on the value of independent variable then the model is uncertain as some inputs and is certian at some inputs. This does not provide us a concrete prediction hence the model is not very reiable. No multicollinearity: There is no high correlation between the independent variables. This means that the independent variables are not too closely related to each other. If there is high correlation between the independent variables, it can be difficult to separate out their individual effects on the dependent variable, leading to unstable estimates of the regression coefficients. How to deal with multicollinearity? Remove one of the correlated variables: The simplest way to deal with multicollinearity is to remove one of the highly correlated variables from the regression model. The downside of this approach is that it reduces the degrees of freedom of the model, which can weaken the statistical power of your analysis. Combine the correlated variables: Another way to deal with multicollinearity is to combine the correlated variables together to form a single predictor. For example, if you had two highly correlated variables, you could combine them together to form a single predictor by taking their average. Use principal components: Principal components analysis (PCA) is a dimension reduction technique that can be used to reduce a large set of variables to a small set that still contains most of the information in the large set. This technique is useful when you have a large number of correlated predictors, and you want to summarize them with a smaller set of representative variables. Use regularization methods: Regularization methods, such as ridge (L2 regularization) regression and lasso regression( L1 Regularization), are powerful techniques that are designed to deal with multicollinearity by constraining the size of the regression coefficients. These methods work well when you have a large number of correlated predictors. Do nothing: If your goal is to make predictions, and not to understand the role of each individual variable, then multicollinearity might not be a problem. Multicollinearity only affects the interpretation of your model if you care about the specific role of each variable. However, multicollinearity does affect the precision of the estimated regression coefficients, which can cause your predictions to be less reliable. Use Partial Least Squares Regression: Partial least squares regression (PLS regression) is a regression method that is an alternative to ordinary least squares (OLS) regression. PLS regression is useful when you have a large number of correlated predictors, and you want to use them to predict an outcome, but you also want to reduce the number of predictors in your model. PLS regression is similar to principal components regression, but the key difference between the two methods is that PLS regression uses the response variable in the dimension reduction step, while principal components regression does not. What is the difference between L1 and L2 regularization? L2 regularization is also known as ridge regression. L1 also known as Lasso. The key difference between them is when we take derivative of the loss function for both, In L2 we see the update or change would be 2*coeff but in L1 it would be either 1 or -1. This is the reason why L1 regularization is used for feature selection and drives some of the coefficients to zero. Visit Interview Questions"
  },"/ML/jekyll/2023-05-08-Regularization.html": {
    "title": "Regularization",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-05-08-Regularization.html",
    "body": ""
  },"/ML/jekyll/2023-05-08-Metrics.html": {
    "title": "Metrics",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-05-08-Metrics.html",
    "body": "Classification Metrics Accuracy: This is the most simple measure, defined as the number of accurate predictions divided by the total number of predictions. This will not be a very good metric as if we have imbalanced class labels, then the metric will be biased towards the majority class. Also, when the problem is multi-class, accuracy will not be a good measure as it does not consider the class information. Confusion Matrix: This is a table that shows the number of correct and incorrect predictions made by the classification model compared to the actual outcomes (target value) in the data. The matrix is NxN, where N is the number of target values (classes). Performance of such models is commonly evaluated using the data in the matrix. This gives us a complete picture of how well our model works with respect to all the classes. 2x2 Confusion Matrix The confusion matrix is for a binary classifier the ground truth are of two types True or False and the prediction can be of two types Positive or Negative. So, the confusion matrix will have 4 values TP, TN, FP, FN. TP: True Positive mean that when the ground truth is True and the prediction is positive. TN: True Negative mean that when the ground truth is True and the prediction is negative. FP: False Positive mean that when the ground truth is False and the prediction is positive. FN: False Negative mean that when the ground truth is False and the prediction is negative.   Prediction 1 Prediction 0 Groud Truth Label 1 TP TN TP+TN Label 0 FP FN FP+FN Predicted TP+FP TN+FN   Precision: Precision is the ratio of correctly predicted positive observations to the total predicted positive observations. The question that this metric answers is of all the positive predictions, how many are actually positive. This metric is useful when the cost of False Positive is high. For example, in the case of death penalty, we would want to be very sure that the person is guilty before giving the death penalty. So, we would want to have a high precision. \\[Precision = \\frac{TP}{(TP+FP)}\\] Recall: Recall is the ratio of correctly predicted positive observations to all observations in the actual class. The question recall answers is: Of all the positive classes, how many did we predict correctly? It is also called Sensitivity. The recall is a good measure to use when the cost of True Negative is high. For example, in the case of a natural calamity, we would want to alert as many people as possible, a wrong alert is not harmful, but a missed alert can be very harmful. \\[Recall = \\frac{TP}{(TP+TN)}\\] \\(F_\\beta\\) Score The \\(F_\\beta\\) score is the weighted harmonic mean of precision and recall, reaching its optimal value at 1 and its worst value at 0. The \\(F_\\beta\\) score weights recall more than precision by a factor of \\(\\beta\\). \\(\\beta\\) = 1.0 means recall and precision are equally important. for \\(\\beta &lt; 1.0\\), precision is more important than recall and vice versa. \\[F_{\\beta} = \\frac{1}{ \\frac{\\beta^2}{1 + \\beta^2} . \\frac{1}{Recall} + \\frac{1}{1 + \\beta^2} . \\frac{1}{Precision} }\\] \\[F_{\\beta} = (1+\\beta^2) \\frac{Precision*Recall}{(\\beta^2*Precision)+Recall}\\] When \\(\\beta\\) = 1.0, it is called F1 score, which is the harmonic mean of precision and recall. \\[F1 = 2 \\frac{Precision*Recall}{Precision+Recall}\\] When \\(\\beta\\) = 0.5, it is called F0.5 score, which is the weighted harmonic mean of precision and recall. \\[F0.5 = \\frac{1.25*Precision*Recall}{(0.25*Precision)+Recall}\\] When \\(\\beta\\) = 2.0, it is called F2 score, which is the weighted harmonic mean of precision and recall. \\[F2 = \\frac{5*Precision*Recall}{(4*Precision)+Recall}\\] F1 Score Multiclass Classification F1 Macro We have to calculate the F1 score for each class and then take the average of all the F1 scores. This is called F1 Macro. F1 Micro We have to calculate the F1 with the global information of total FP, FN and TP. F1 Weighted We have to calculate the F1 score for each class and then take the weighted average of all the F1 scores. Weights are the number of samples in each class or can be user defined. AUC ROC Curve: Needs revision AUC ROC curve is a performance measurement for binary classification problems. ROC is a curve AUC is the area under the ROC curve. The ROC curve is a plot of the true positive rate (TPR) against the false positive rate (FPR) for a model which outputs probability. We use a threshold to predict the label, and these labels are used to calculate TPR and FPR. It shows the tradeoff between sensitivity and specificity. The closer the curve follows the upper left-hand border of the ROC space, the better the model (Why). The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test. The ROC curve is also called the receiver operating characteristic. The area under the ROC curve (AUC) is equal to the probability that a classifier will rank a randomly chosen positive instance higher than a randomly chosen negative one (assuming ‘positive’ ranks higher than ‘negative’). Questions What is the difference between accuracy and F1 score when the classes are balanced? Accuracy is the same as F1 macro score when the classes are balanced, but F1 micro will still give a better score as it give equal weightage to all the classes and overall accuracy might look good, but internally, the prediction for some classes might not be good. Both accuracy and F1 macro score will not capture this. Regression Metrics Mean Absolute/Squared Error and Root Mean Squared Error The mean absolute error (MAE) We’ll calculate the average absolute error between actual and predicted values. The mean squared error (MSE) is very similar to the MAE, but it squares the difference before summing them all instead of using the absolute value. This means that large errors are penalized more than with the MAE. The root mean squared error (RMSE) is the square root of the MSE. It’s more popular than MSE because the RMSE is interpretable in the “y” units. R Squared A dataset has n values marked \\(y_1,..,y_n\\) (collectively known as \\(y_i\\) or as a vector \\(y = [y_1,...,y_n]^T\\)), each associated with a fitted (or modeled, or predicted) value \\(f_1,...,f_n\\) (known as $f_i$, or sometimes \\(\\hat{y_i}\\), as a vector f). Define the residuals as \\(e_i = y_i − f_i\\) (forming a vector e). If \\(\\bar {y}\\) is the mean of the observed data then the variability of the data set can be measured with two sums of squares formulas: The sum of squares of residuals also called the residual sum of squares: \\[SS_{\\text{res}}=\\sum _{i}(y_{i}-f_{i})^{2}=\\sum _{i}e_{i}^{2}\\] The total sum of squares (proportional to the variance of the data): \\[SS_{\\text{tot}}=\\sum _{i}(y_{i}-{\\bar {y}})^{2}\\] The most general definition of the coefficient of determination is \\(R^{2}=1-{SS_{\\rm {res}} \\over SS_{\\rm {tot}}}\\) In the best case, the modeled values exactly match the observed values, which results in \\(SS_{\\text{res}}=0\\) and \\(R^{2}=1\\). A baseline model, which always predicts \\(\\bar {y}\\), will have \\(R^{2}=0\\). Models that have worse predictions than this baseline will have a negative \\(R^{2}\\). Fraction of variance unexplained In a general form, \\(R^{2}\\) can be seen to be related to the fraction of variance unexplained (FVU). The numerator in the equation represents unexplained variance, while the denominator represents total variance. The FVU is the ratio of unexplained variance to total variance: \\[R^{2}= \\frac{ SS_{\\rm {tot}} - SS_{\\rm {res} }}{ SS_{\\rm {tot}}}\\] Inflated R2 When we add a new estimator or variable into the regression model \\(R^{2}\\) goes up or at least will stay the same which not good because comparing models with different numbers of features will not be feasible with \\(R^{2}\\). Proof 2 Adjusted R Squared: The use of an adjusted \\(R^{2}\\) (one common notation is \\({\\bar R}^{2}\\), pronounced “R bar squared”; another is \\(R_{\\text{a}}^{2}\\) or \\(R_{\\text{adj}}^{2}\\)) is an attempt to account for the phenomenon of the \\(R^{2}\\) automatically increasing when extra explanatory variables are added to the model. There are many different ways of adjusting ([14]). By far the most used one, to the point that it is typically just referred to as adjusted R, is the correction proposed by Mordecai Ezekiel. The adjusted \\(R^{2}\\) is defined as \\[{\\bar {R}}^{2}={1-{SS_{\\text{res}}/{\\text{df}}_{\\text{res}} \\over SS_{\\text{tot}}/{\\text{df}}_{\\text{tot}}}}\\] where dfres is the degrees of freedom of the estimate of the population variance around the model, and dftot is the degrees of freedom of the estimate of the population variance around the mean. dfres is given in terms of the sample size n and the number of variables p in the model, dfres =n − p. dftot is given in the same way, but with p being unity for the mean, i.e. dftot = n − 1. The adjusted \\(R^{2}\\) can be negative, and its value will always be less than or equal to that of \\(R^{2}\\). Retrieval Metrics MAP NDCG Precision@K Recall@K MRR BPREF https://www.pinecone.io/learn/offline-evaluation/ Summarization Metrics ROUGE BLEU METEOR BERTScore Perplexity Clustering Metrics Silhouette Score Inter and Intra Cluster Distance ratio Segmentation Metrics IoU Precision Recall F1 Score MAP"
  },"/ML/jekyll/2023-05-08-Logistic_Regression.html": {
    "title": "Logistic Regression",
    "keywords": "Jekyll",
    "url": "/ML/jekyll/2023-05-08-Logistic_Regression.html",
    "body": "Logistic regression is linear regression over the log odds or logit of the probability of input belonging to a class. The model choice in logistic regression is the logits of the probability are linearly dependent on the independent variable. But the problem we solve with this is the classification problem. The output of the model is the probability of the input belonging to a class. \\(logit(p) = log(\\frac{p}{p+1})\\) The model is as follows: \\[logit(p) = w^Tx + b\\] \\[p = \\frac{1}{1+e^{-(w^Tx+b)}}\\] \\[p = \\sigma(w^Tx+b)\\] What sigmoid does is that it constrains the output between 0 and 1. This is one of the definitions of logistic regression. Geometric Formulation We can have a geometric explanation as well. We start with a classification boundary which is \\(w^Tx +b\\). We want a w such that \\(\\forall i \\; y_i(w^Tx_i+b)&gt;=0\\) i.e the predicted class and the actual class are of the same sign for the product term to be positive but using a objective function which maximizes \\(\\sum y_i(w^Tx_i+b)\\) has some limitation. The problem is that when an outlier comes, the loss value will be very high, and the model will try to fit the outlier. To solve the problem sigmoid function is used as it constrains the values between 0 and 1 which limits the impact of outlier. Formulation of the loss function The purpose of the loss function is to maximize the probability of the correct class. Logistic regression is a binary classification problem; hence we have two classes, 0 and 1. Higher probability is associated with class 1, and low probability is associated with class 0. The objective function is as follows: \\[L = \\prod_{i=1}^n p_i^{y_i}(1-p_i)^{1-y_i} \\; where \\; p = \\sigma(w^Tx+b)\\] \\[L = \\prod_{i=1}^n \\sigma(w^Tx_i+b)^{y_i}(1-\\sigma(w^Tx_i+b))^{1-y_i}\\] As all the values are always positive, taking log will not affect the optimization problem. Also will help with numerical stability as the probability values are very small and the product will be even smaller. Hence the loss function is as follows: \\[L = \\sum_{i=1}^n y_i log(\\sigma(w^Tx_i+b)) + (1-y_i)log(1-\\sigma(w^Tx_i+b))\\] \\[w^* = argmax_w L(w)\\] But still, we have a problem which is that if when w tends to infinity, the we would have the maximum value of the objective function, which is not what we want. Hence we add a regularization term to the objective function. The objective function is as follows: \\[L = \\sum_{i=1}^n y_i log(\\sigma(w^Tx_i+b)) + (1-y_i)log(1-\\sigma(w^Tx_i+b)) + \\lambda ww^T\\] Interview Questions Should we normailze the data before giving it to the logistice regression algorithim? Yes we should normalize the data it would give use two problems first is the Interpretiblity of the weights/coffecient Interpretiblity of the weights/coffecient as because the coffecient indicats the impact on prediction when we have unit change in the feature but feats with differect scale can not be compaired with each other once we normalize (Min Max) or standardize (\\(\\mu =0 , \\sigma =1\\)) the data becomes unitless hence comparative interpretblity is possible which could indicate geniune feature importance. Convergence of SGD The magnitude of gradient of depends on the values of the inputs which we can see for both squared loss and cross entorpy loss which mean that feature with higher values wil have bigger gradient and features with smaller values will have smaller gradient hence convergence would led to ossilation but when the data is normalized such problem is prevented."
  }}
